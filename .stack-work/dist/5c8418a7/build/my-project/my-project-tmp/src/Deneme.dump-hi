
==================== FINAL INTERFACE ====================
2018-02-12 13:16:46.0230834 UTC

interface main:Deneme 8022
  interface hash: cde40ed6c55ba3d880cb72631a231dbc
  ABI hash: a9c32df67f903b24a75e3ea3fbc36e85
  export-list hash: 9c2abcd866a722f309d2166f699f2ffe
  orphan hash: 30ebe60613a4f049bef6d0d0c389473e
  flag hash: 81b0ae51f8f224ef1791901768c4ad65
  sig of: Nothing
  used TH splices: False
  where
exports:
  Deneme.contactToDocument
  Deneme.countByCity
  Deneme.dbName
  Deneme.deleteAllEntries
  Deneme.deleteEntry
  Deneme.displayEntry
  Deneme.doCitySummary
  Deneme.doDelete
  Deneme.doFind
  Deneme.doInsert
  Deneme.doPopulate
  Deneme.findByFirstName
  Deneme.hobarak
  Deneme.insertContact
  Deneme.insertContacts
  Deneme.printCityCount
  Deneme.processArgs
  Deneme.Contact{Deneme.Contact category cellPhone city firstName lastName}
module dependencies: MongoUtils
package dependencies: MonadRandom-0.5.1 Win32-2.5.4.1 array-0.5.2.0
                      base-4.10.1.0 base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.1
                      basement-0.0.4 binary-0.8.5.1 bson-0.3.2.3 bytestring-0.10.8.2
                      containers-0.5.10.2 cryptohash-0.11.9 cryptonite-0.24
                      data-binary-ieee754-0.4.4 deepseq-1.4.3.0 entropy-0.3.8
                      foundation-0.0.17 ghc-prim-0.5.1.1 hashable-1.2.6.1
                      hashtables-1.2.2.1 integer-gmp-1.0.1.0 lifted-base-0.2.3.11
                      memory-0.14.11 monad-control-1.0.2.2 mongoDB-2.3.0.2 mtl-2.2.1
                      network-2.6.3.3 nonce-1.0.5 parsec-3.1.13.0 primitive-0.6.3.0
                      random-1.1 random-shuffle-0.0.4 stm-2.4.5.0 text-1.2.2.2
                      time-1.8.0.2 transformers-0.5.2.0 transformers-base-0.4.4
                      unliftio-0.2.4.0 unliftio-core-0.1.1.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.6.1:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         text-1.2.2.2:Data.Text.Lazy
         mongoDB-2.3.0.2:Database.MongoDB.Internal.Util
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.6.3.3:Network.Socket
         transformers-0.5.2.0:Control.Monad.Trans.Error
         stm-2.4.5.0:Control.Monad.STM basement-0.0.4:Basement.UArray.Base
         basement-0.0.4:Basement.Block text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1:Control.Monad.Trans.Random.Lazy
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats basement-0.0.4:Basement.Block.Base
                         basement-0.0.4:Basement.BoxedArray basement-0.0.4:Basement.Monad
                         basement-0.0.4:Basement.MutableBuilder basement-0.0.4:Basement.Nat
                         basement-0.0.4:Basement.NonEmpty
                         basement-0.0.4:Basement.Numerical.Subtractive
                         basement-0.0.4:Basement.String
                         basement-0.0.4:Basement.String.Encoding.ASCII7
                         basement-0.0.4:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4:Basement.String.Encoding.UTF16
                         basement-0.0.4:Basement.String.Encoding.UTF32
                         basement-0.0.4:Basement.Types.AsciiString
                         basement-0.0.4:Basement.Types.OffsetSize
                         basement-0.0.4:Basement.UArray.Base
                         basement-0.0.4:Basement.UTF8.Base
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         cryptonite-0.24:Crypto.Hash.Blake2
                         cryptonite-0.24:Crypto.Hash.Blake2b
                         cryptonite-0.24:Crypto.Hash.Blake2bp
                         cryptonite-0.24:Crypto.Hash.Blake2s
                         cryptonite-0.24:Crypto.Hash.Blake2sp
                         cryptonite-0.24:Crypto.Hash.Keccak cryptonite-0.24:Crypto.Hash.MD2
                         cryptonite-0.24:Crypto.Hash.MD4 cryptonite-0.24:Crypto.Hash.MD5
                         cryptonite-0.24:Crypto.Hash.RIPEMD160
                         cryptonite-0.24:Crypto.Hash.SHA1 cryptonite-0.24:Crypto.Hash.SHA224
                         cryptonite-0.24:Crypto.Hash.SHA256 cryptonite-0.24:Crypto.Hash.SHA3
                         cryptonite-0.24:Crypto.Hash.SHA384
                         cryptonite-0.24:Crypto.Hash.SHA512
                         cryptonite-0.24:Crypto.Hash.SHA512t
                         cryptonite-0.24:Crypto.Hash.SHAKE
                         cryptonite-0.24:Crypto.Hash.Skein256
                         cryptonite-0.24:Crypto.Hash.Skein512
                         cryptonite-0.24:Crypto.Hash.Tiger
                         cryptonite-0.24:Crypto.Hash.Whirlpool
                         foundation-0.0.17:Foundation.Array.Bitmap
                         foundation-0.0.17:Foundation.Array.Chunked.Unboxed
                         foundation-0.0.17:Foundation.Collection.Buildable
                         foundation-0.0.17:Foundation.Collection.Element
                         foundation-0.0.17:Foundation.Collection.Keyed
                         foundation-0.0.17:Foundation.Collection.Mutable
                         foundation-0.0.17:Foundation.Tuple
                         monad-control-1.0.2.2:Control.Monad.Trans.Control
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.2.2:Data.Text
                         text-1.2.2.2:Data.Text.Lazy vector-0.12.0.1:Data.Vector
                         vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Monad 0557f10d93e84201ae1d619074f2aa0b
import  -/  base-4.10.1.0:Control.Monad.IO.Class b93c5967fca7004b818fdafb0cc54b20
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.Functor b59a97e639e05373a94999f9bb899676
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.Environment 29b8ecc18446119a33172a40409ab016
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  base-4.10.1.0:Text.Printf 458fb673cc5cd320f1c052ee28243571
import  -/  bson-0.3.2.3:Data.Bson 52582df4dada2bc8156e426732685f0f
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  MongoUtils 0cca4abf738e43ffb3e452c810d79daa
  exports: fbb039e3f1aec8e2c024bfe6bc7cb629
  getInteger 01cdfc55f042ea1c347178ed4d2b9aec
  getString 9d17ff7ced71d041899da3bd24c657d0
  lookupString aba2720710485e7e92e64aa426640e23
  runMongo f8bed8d566174f2869199d65027fac9c
import  -/  mongoDB-2.3.0.2:Database.MongoDB afb0ea6c4e0802218fb34aaee3dc9cf7
import  -/  mongoDB-2.3.0.2:Database.MongoDB.Query e30c5ac2207465abd35a9300e61e4c44
import  -/  mtl-2.2.1:Control.Monad.Trans 97be1c00d22df1780fadf4c4335ae748
import  -/  text-1.2.2.2:Data.Text 73fb29833b2b8dd6878f639e28457451
ecd000e59a375ad5afb59a72fd737ce6
  $fShowContact :: GHC.Show.Show Deneme.Contact
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Deneme.Contact
                  Deneme.$fShowContact_$cshowsPrec
                  Deneme.$fShowContact_$cshow
                  Deneme.$fShowContact_$cshowList -}
ecd000e59a375ad5afb59a72fd737ce6
  $fShowContact1 :: Deneme.Contact -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Deneme.Contact) (w1 :: GHC.Base.String) ->
                 case w of ww { Deneme.Contact ww1 ww2 ww3 ww4 ww5 ->
                 Deneme.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 w1 }) -}
9f97ac661d22c1ef27fbcb46b5a14ea3
  $fShowContact10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5f234a33f84da0bd79c6d9f560939b94
  $fShowContact2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.$fShowContact3) -}
2ab723eca377e0e439690591364fae70
  $fShowContact3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Contact {"#) -}
0b71600f66bfbf7a4a2f21f9d260f9ef
  $fShowContact4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
8157f6629847c7dcb290b4eb07855708
  $fShowContact5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cellPhone = "#) -}
9726787961994dc267f726069e196ff0
  $fShowContact6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("city = "#) -}
9251c447171050d5d41b923025d22a61
  $fShowContact7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("category = "#) -}
dd3e140930f9974533c1e23696c4259e
  $fShowContact8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lastName = "#) -}
7bb71f44f2762a0372a1ff592565df95
  $fShowContact9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("firstName = "#) -}
ecd000e59a375ad5afb59a72fd737ce6
  $fShowContact_$cshow :: Deneme.Contact -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Deneme.Contact) ->
                 Deneme.$fShowContact_$cshowsPrec
                   Deneme.$fShowContact10
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ecd000e59a375ad5afb59a72fd737ce6
  $fShowContact_$cshowList :: [Deneme.Contact] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Deneme.Contact
                   Deneme.$fShowContact1) -}
ecd000e59a375ad5afb59a72fd737ce6
  $fShowContact_$cshowsPrec ::
    GHC.Types.Int -> Deneme.Contact -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Deneme.Contact)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Deneme.Contact ww3 ww4 ww5 ww6 ww7 ->
                 Deneme.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 w2 } }) -}
e42532b776b43d7da85faedd76f045c5
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Deneme.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r)
                  (\ @ a (x :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, x #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   (Trans
                        (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <a>_N))))
                  (Deneme.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fApplicativeIO)
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                     (eta1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                     (r1 :: r)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                           r1)
                          `cast`
                        (GHC.Types.N:IO[0] <a>_R)
                          s of ds { (#,#) ipv ipv1 ->
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                      r1)
                     `cast`
                   (GHC.Types.N:IO[0] <b>_R)
                     ipv })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                   ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                   ->_R Trans
                            (<r>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N <r>_R <GHC.Types.IO>_R <b>_N)))
                  (\ @ a @ b ->
                   Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fApplicativeIO
                     @ a
                     @ b
                     @ a
                     (GHC.Base.const @ a @ b)) -}
b2ba08739b2cd03f1b19fde561193865
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
64e9a8171ba435c3741d5f1104ba2ed6
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Deneme.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Reader.mapReaderT
                     @ *
                     @ *
                     @ GHC.Types.IO
                     @ b
                     @ GHC.Types.IO
                     @ a
                     @ r
                     (\ (x1 :: GHC.Types.IO b)
                        (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x1 `cast` (GHC.Types.N:IO[0] <b>_R)
                             s of ds { (#,#) ipv ipv1 ->
                      (# ipv, x #) })
                       `cast`
                     (<GHC.Types.IO b>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))) -}
4dda46f35af920a16dba5663c6046bd8
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
ed3beba1ed810b78794fa50b36edc474
  $s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Deneme.$s$fApplicativeReaderT @ r)
                  (Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r)
                  (Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   (Trans
                        (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <a>_N))))
                  (Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r) -}
ffd6bdd23ed25da7b6fc98857eecf747
  $s$fMonadReaderT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (k `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
f42d6e14e81991942546372166573b49
  $s$fMonadReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
50b7dccecffe650c600492540c3c4afc
  $s$fMonadReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ a
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
e45eabe9a0ae69ee0c4f9fda8361cf9b
  $tc'Contact :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3485114623343677778##
                   12994553627335004038##
                   Deneme.$trModule
                   Deneme.$tc'Contact2
                   0#
                   Deneme.$tc'Contact1) -}
681de62c8d1770222900850676ccdb6f
  $tc'Contact1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
51b594a6644819286e56ea7862ddf100
  $tc'Contact2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deneme.$tc'Contact3) -}
efbdb2ddbb51b1576969cce9d2f8c0a8
  $tc'Contact3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Contact"#) -}
5fff8eeb485e67ba92e4e9b93aa09071
  $tcContact :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1147860048503826472##
                   14970036695411500797##
                   Deneme.$trModule
                   Deneme.$tcContact1
                   0#
                   GHC.Types.krep$*) -}
5c7e7fc38739027845a4791a4e674f40
  $tcContact1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deneme.$tcContact2) -}
1aac2a4e4e39c28d3d718293bb1d87e1
  $tcContact2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Contact"#) -}
a453bc0e53e0a6817604fb2ef63b9591
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Deneme.$trModule3
                   Deneme.$trModule1) -}
eec4d9a785c1874ecdb27c28290419b4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deneme.$trModule2) -}
05b4f9db8dc6fa89d5ef90f0c775c85b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Deneme"#) -}
8162fd78d16e091967ba0a3b2a2b1e3a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deneme.$trModule4) -}
26587a0348065027b1eeac906599c9ac
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
833069388811b8784fd3ff7698fcdcae
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Deneme.$fShowContact9
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.showCommaSpace1
                                   (GHC.CString.unpackAppendCString#
                                      Deneme.$fShowContact8
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Show.showLitString
                                            ww2
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)3
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Deneme.$fShowContact7
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.$fShow(,)3
                                                        (GHC.Show.showLitString
                                                           ww3
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.$fShow(,)3
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.showCommaSpace1
                                                                 (GHC.CString.unpackAppendCString#
                                                                    Deneme.$fShowContact6
                                                                    (GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       GHC.Show.$fShow(,)3
                                                                       (GHC.Show.showLitString
                                                                          ww4
                                                                          (GHC.Types.:
                                                                             @ GHC.Types.Char
                                                                             GHC.Show.$fShow(,)3
                                                                             (GHC.Base.++
                                                                                @ GHC.Types.Char
                                                                                GHC.Show.showCommaSpace1
                                                                                (GHC.CString.unpackAppendCString#
                                                                                   Deneme.$fShowContact5
                                                                                   (GHC.Types.:
                                                                                      @ GHC.Types.Char
                                                                                      GHC.Show.$fShow(,)3
                                                                                      (GHC.Show.showLitString
                                                                                         ww5
                                                                                         (GHC.Types.:
                                                                                            @ GHC.Types.Char
                                                                                            GHC.Show.$fShow(,)3
                                                                                            (GHC.CString.unpackAppendCString#
                                                                                               Deneme.$fShowContact4
                                                                                               x))))))))))))))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Deneme.$fShowContact2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Deneme.$fShowContact2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
137b7872e25a2b8fbbcaccaa60c69cdf
  $wcontactToDocument ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# Data.Bson.Field, [Data.Bson.Field] #)
  {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String) ->
                 (# case Deneme.contactToDocument9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                    Data.Bson.:=
                      dt
                      (Data.Bson.String
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds1 { (#,#) ipv4 ipv5 ->
                                  Deneme.$wouter4 ipv5 4# ww 0# ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                          ipv5 })) },
                    GHC.Types.:
                      @ Data.Bson.Field
                      (case Deneme.contactToDocument7 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                       Data.Bson.:=
                         dt
                         (Data.Bson.String
                            (case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Text.Internal.Text #)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newByteArray#
                                            @ GHC.Prim.RealWorld
                                            10#
                                            s1 of ds1 { (#,#) ipv4 ipv5 ->
                                     Deneme.$wouter3
                                       ipv5
                                       4#
                                       ww1
                                       0#
                                       ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                             ipv5 })) })
                      (GHC.Types.:
                         @ Data.Bson.Field
                         (case Deneme.contactToDocument5 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                          Data.Bson.:=
                            dt
                            (Data.Bson.String
                               (case GHC.Magic.runRW#
                                       @ ('GHC.Types.TupleRep
                                            '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                       @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Text.Internal.Text #)
                                       (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case GHC.Prim.newByteArray#
                                               @ GHC.Prim.RealWorld
                                               10#
                                               s1 of ds1 { (#,#) ipv4 ipv5 ->
                                        Deneme.$wouter2
                                          ipv5
                                          4#
                                          ww2
                                          0#
                                          ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                                ipv5 })) })
                         (GHC.Types.:
                            @ Data.Bson.Field
                            (case Deneme.contactToDocument3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                             Data.Bson.:=
                               dt
                               (Data.Bson.String
                                  (case GHC.Magic.runRW#
                                          @ ('GHC.Types.TupleRep
                                               '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                          @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Text.Internal.Text #)
                                          (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.newByteArray#
                                                  @ GHC.Prim.RealWorld
                                                  10#
                                                  s1 of ds1 { (#,#) ipv4 ipv5 ->
                                           Deneme.$wouter1
                                             ipv5
                                             4#
                                             ww3
                                             0#
                                             ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                                   ipv5 })) })
                            (GHC.Types.:
                               @ Data.Bson.Field
                               (case Deneme.contactToDocument1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                Data.Bson.:=
                                  dt
                                  (Data.Bson.String
                                     (case GHC.Magic.runRW#
                                             @ ('GHC.Types.TupleRep
                                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Text.Internal.Text #)
                                             (\ (s1 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              case GHC.Prim.newByteArray#
                                                     @ GHC.Prim.RealWorld
                                                     10#
                                                     s1 of ds1 { (#,#) ipv4 ipv5 ->
                                              Deneme.$wouter
                                                ipv5
                                                4#
                                                ww4
                                                0#
                                                ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                                      ipv5 })) })
                               (GHC.Types.[] @ Data.Bson.Field)))) #)) -}
59f80bc00a81e04f0d678ebd4b4f86a0
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Deneme.doInsert2
                   GHC.Types.False
                   w) -}
37c1edc2954775ac8af0856d804056e0
  $winsertContact ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
0e00bbdb7f97dd148f2b7aba13c8d61b
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
dd42093b9c678dcf4ed58e008b107e6d
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
f5dc5092621b35fb127322af70b4df0c
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
03e0a1944dbfd85864664e2b38323655
  $wouter3 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
483fd9a9d9ad80a4f36e02cabbcf48e9
  $wouter4 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
78ce7af8c5d30a4386966f1eeef2ae7b
  $wouter6 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d0f8bd41df1643b9b83a59d5f62d71ca
  $wouter7 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
56cdf97828bfc518cf2607e3a3556b0d
  $wouter8 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
ecd000e59a375ad5afb59a72fd737ce6
  data Contact
    = Contact {firstName :: GHC.Base.String,
               lastName :: GHC.Base.String,
               category :: GHC.Base.String,
               city :: GHC.Base.String,
               cellPhone :: GHC.Base.String}
ecd000e59a375ad5afb59a72fd737ce6
  category :: Deneme.Contact -> GHC.Base.String
  RecSel Left Deneme.Contact
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Deneme.Contact) ->
                 case ds of wild { Deneme.Contact ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
ecd000e59a375ad5afb59a72fd737ce6
  cellPhone :: Deneme.Contact -> GHC.Base.String
  RecSel Left Deneme.Contact
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Deneme.Contact) ->
                 case ds of wild { Deneme.Contact ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
ecd000e59a375ad5afb59a72fd737ce6
  city :: Deneme.Contact -> GHC.Base.String
  RecSel Left Deneme.Contact
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Deneme.Contact) ->
                 case ds of wild { Deneme.Contact ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
03bd03071671f18bbba5e877dcf91581
  contactToDocument :: Deneme.Contact -> Data.Bson.Document
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U)>m2,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Deneme.Contact) ->
                 case w of ww { Deneme.Contact ww1 ww2 ww3 ww4 ww5 ->
                 case Deneme.$wcontactToDocument
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Types.: @ Data.Bson.Field ww7 ww8 } }) -}
79f34bca802b40b39057dc1274ac94c0
  contactToDocument1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.contactToDocument2) -}
4f1809024dc810c6a96590cc1fc9f64b
  contactToDocument10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("firstName"#) -}
abdca592874ec631a4b23f59d54d1d15
  contactToDocument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cell"#) -}
8aaf3dd66992373d081d06673b98b12b
  contactToDocument3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.contactToDocument4) -}
f0e7b7f70efd2b7fdaee3a342291ca6b
  contactToDocument4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("city"#) -}
997353c5cd4727315e272c38ef718657
  contactToDocument5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.contactToDocument6) -}
db8b10f3df1e2839c49c893c84ff4f9c
  contactToDocument6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("category"#) -}
26313697ecdd3fdcd31e9dd34384f62e
  contactToDocument7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.contactToDocument8) -}
757cf69b011205e98aefe6420011b199
  contactToDocument8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lastName"#) -}
d4cf9dc208c63a0a440fdedd1eca2920
  contactToDocument9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.contactToDocument10) -}
272f5a4fe3a13b03a0f65db235d29f85
  countByCity ::
    Database.MongoDB.Query.Action GHC.Types.IO [Data.Bson.Document]
  {- Unfolding: (Deneme.countByCity45
                   Deneme.countByCity43
                   Deneme.countByCity1) -}
d5cd7355e7587ddc3c8405bf9d9ab523
  countByCity1 :: [Data.Bson.Document]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Document
                   Deneme.countByCity33
                   Deneme.countByCity2) -}
c727393c1831d0a132792202b4bbdf25
  countByCity10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
6f21f879372f048560d856b0ea0d9014
  countByCity11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$sort"#) -}
a5bf06b8839f9d414abd3eb184d2789e
  countByCity12 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity13
                   (GHC.Types.[] @ Data.Bson.Field)) -}
fc7e132d235e5f94ec19b60e9744e626
  countByCity13 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity32 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity14 }) -}
1184454b03675620acec75f167699fa8
  countByCity14 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity15) -}
b4dc636a2bbf27ce98162ddee0a54278
  countByCity15 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity23
                   Deneme.countByCity16) -}
323ec1ec47904427255f4e9806751f11
  countByCity16 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity17
                   (GHC.Types.[] @ Data.Bson.Field)) -}
235b7362068821f4078c4766bd85bee3
  countByCity17 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity22 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity18 }) -}
215e324019fdb9b8dd8cce2b3f94b102
  countByCity18 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity19) -}
9787fddfa06337c9fdb9b03b2cf8a1b0
  countByCity19 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity20
                   (GHC.Types.[] @ Data.Bson.Field)) -}
41610ddfed2dfb0c6ce2d2ab389cafef
  countByCity2 :: [Data.Bson.Document]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Document
                   Deneme.countByCity12
                   Deneme.countByCity3) -}
25116e65c8e39f6393831514f75d9325
  countByCity20 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity21 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity9 }) -}
12920986d4874eb0489977ca4e165e3f
  countByCity21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$sum"#) -}
4b725dfe9188d7d7ffeed2efdbb6d999
  countByCity22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("total"#) -}
2c9008eb397832b0326ced26f12f480c
  countByCity23 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity31 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity24 }) -}
55b2f76d7d0102dc2c2d8e1ba7ace7a0
  countByCity24 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity25) -}
d43ee368a33fafa9193526757d270c96
  countByCity25 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity26
                   (GHC.Types.[] @ Data.Bson.Field)) -}
9d999d9f12cfb7783f2cdd367419ff66
  countByCity26 :: Data.Bson.Field
  {- Unfolding: (case Deneme.contactToDocument3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity27 }) -}
320422358edb9e12a549c55d5acdbcc4
  countByCity27 :: Data.Bson.Value
  {- Strictness: m2,
     Unfolding: (Data.Bson.String Deneme.countByCity28) -}
ec555010730f621753e583858d2b5dac
  countByCity28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Deneme.countByCity29 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cfc7f7fb6b082805d4c670e546693452
  countByCity29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Data.Bson.$wouter
                   ipv1
                   4#
                   (GHC.CString.unpackCString# Deneme.countByCity30)
                   0#
                   ipv }) -}
9811106b9c301b6a226bdda172a93b5d
  countByCity3 :: [Data.Bson.Document]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Document
                   Deneme.countByCity4
                   (GHC.Types.[] @ Data.Bson.Document)) -}
c0075e587cea184ee8b2edf0fbc77414
  countByCity30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$city"#) -}
ab985339aa864dfec9d620d6a824c3b6
  countByCity31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_id"#) -}
06b4113ea72e2f8e9a4946911cdc2a6a
  countByCity32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$group"#) -}
94c916c6bb3bf6b3085fde300700a1b7
  countByCity33 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity34
                   (GHC.Types.[] @ Data.Bson.Field)) -}
ac5381b963cbbde3e895166dc9a133bd
  countByCity34 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity42 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity35 }) -}
67f9e72fbc549158894c6bf86f730ddf
  countByCity35 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity36) -}
016490d9b88c8e384185e311dc8bcccf
  countByCity36 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity37
                   (GHC.Types.[] @ Data.Bson.Field)) -}
6a3839af13010acc269ead74adf64682
  countByCity37 :: Data.Bson.Field
  {- Unfolding: (case Deneme.contactToDocument1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity38 }) -}
6f57200a5de9dbcfeca752190bff77c0
  countByCity38 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity39) -}
f53fc79ad88994a8aefb8a651c837512
  countByCity39 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity40
                   (GHC.Types.[] @ Data.Bson.Field)) -}
d484a02d8ad97437e113de17814680de
  countByCity4 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity5
                   (GHC.Types.[] @ Data.Bson.Field)) -}
fdb0e104498ceb2cadb50881004cf549
  countByCity40 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity41 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity9 }) -}
c7778496d90d5c48c96249f50f624a10
  countByCity41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$exists"#) -}
dc43832c706c6224e9bae5d4ba3a9a32
  countByCity42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$match"#) -}
15a6486bc6887bfd6c5eb6f09078a11b
  countByCity43 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.countByCity44) -}
5920207d4d7fbff7205f38c504ba2111
  countByCity44 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("contacts"#) -}
ef601bdfdb5d27bbda5f7f6ac25d1129
  countByCity45 ::
    Database.MongoDB.Query.Collection
    -> Database.MongoDB.Query.Pipeline
    -> Database.MongoDB.Query.Action GHC.Types.IO [Data.Bson.Document]
  {- Unfolding: (Database.MongoDB.Query.aggregate
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO) -}
192ee6194afca587304c640416441418
  countByCity5 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Deneme.countByCity11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity6 }) -}
ad8e0dd61513c1691cd8e011b3a6351b
  countByCity6 :: Data.Bson.Value
  {- Strictness: m3,
     Unfolding: (Data.Bson.Doc Deneme.countByCity7) -}
16082693241ba31e7dcef645284f64a1
  countByCity7 :: [Data.Bson.Field]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Deneme.countByCity8
                   (GHC.Types.[] @ Data.Bson.Field)) -}
0a7ab2dbe59508c1308aa42e800d660b
  countByCity8 :: Data.Bson.Field
  {- Unfolding: (case Deneme.contactToDocument3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Deneme.countByCity9 }) -}
31e7eae8ff7e8b7e6fce855d525599fd
  countByCity9 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.$fValInteger_$cval
                   Deneme.countByCity10) -}
798f07c02ff93e0a4d2083358eb7944c
  dbName :: Data.String.IsString p => p
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ p ($dIsString :: Data.String.IsString p) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <p>_N)
                   Deneme.dbName1) -}
50fe5cb5decbdecafbefd49f7381cfbc
  dbName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.dbName2) -}
5257186cf102bc888df21d4d349d4d8b
  dbName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("phoneBook"#) -}
7306ac3fe3e07e043eefe12018bd11c5
  deleteAllEntries ::
    Control.Monad.IO.Class.MonadIO m =>
    Database.MongoDB.Query.Action m ()
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><L,U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Deneme.deleteAllEntries1
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.IO.Class.MonadIO m>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <Database.MongoDB.Query.MongoContext>_R <m>_R <()>_N)) -}
a4a404167781df068baaffd235091661
  deleteAllEntries1 ::
    Control.Monad.IO.Class.MonadIO m =>
    Database.MongoDB.Query.MongoContext -> m ()
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><L,U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (w3 :: Database.MongoDB.Query.MongoContext) ->
                 Database.MongoDB.Query.$wdeleteHelper
                   @ m
                   $dMonadIO
                   (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.DeleteOption)
                   (GHC.Types.[] @ Data.Bson.Field)
                   Deneme.countByCity43
                   w3) -}
cb35affa433bba7d9627db1e6e279bfb
  deleteAllEntries_$sdeleteAllEntries ::
    Database.MongoDB.Query.MongoContext -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: Database.MongoDB.Query.MongoContext) ->
                 Database.MongoDB.Query.$wdeleteHelper
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.DeleteOption)
                   (GHC.Types.[] @ Data.Bson.Field)
                   Deneme.countByCity43
                   w3) -}
e5515ff444d78f3221865d6d57a58c33
  deleteEntry ::
    Control.Monad.IO.Class.MonadIO m =>
    GHC.Base.String -> Database.MongoDB.Query.Action m ()
  {- Arity: 2, Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),C(U))><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.deleteEntry1
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.IO.Class.MonadIO m>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <Database.MongoDB.Query.MongoContext>_R <m>_R <()>_N)) -}
338212a20141f3843f9127750309d68e
  deleteEntry1 ::
    Control.Monad.IO.Class.MonadIO m =>
    GHC.Base.String -> Database.MongoDB.Query.MongoContext -> m ()
  {- Arity: 2, Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),C(U))><L,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (firstName1 :: GHC.Base.String) ->
                 let {
                   w2 :: Data.Bson.Field
                   = case Deneme.contactToDocument9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                     Data.Bson.:=
                       dt
                       (Data.Bson.String
                          (case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Text.Internal.Text #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case GHC.Prim.newByteArray#
                                          @ GHC.Prim.RealWorld
                                          10#
                                          s1 of ds1 { (#,#) ipv4 ipv5 ->
                                   Deneme.$wouter6
                                     ipv5
                                     4#
                                     firstName1
                                     0#
                                     ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                           ipv5 })) }
                 } in
                 let {
                   w1 :: [Data.Bson.Field]
                   = GHC.Types.: @ Data.Bson.Field w2 (GHC.Types.[] @ Data.Bson.Field)
                 } in
                 \ (w3 :: Database.MongoDB.Query.MongoContext) ->
                 Database.MongoDB.Query.$wdeleteHelper
                   @ m
                   $dMonadIO
                   (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.DeleteOption)
                   w1
                   Deneme.countByCity43
                   w3) -}
84b15d918cda9c4e1caa32db80da52c1
  displayEntry :: [Data.Bson.Document] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.displayEntry1
                  `cast`
                (<[Data.Bson.Document]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
df67112814f9784d70fd62081ef088aa
  displayEntry1 ::
    [Data.Bson.Document]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
b3abf6be314453eff78b93c42fd34c90
  doCitySummary :: Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.doCitySummary1
                  `cast`
                (Trans
                     (<Database.MongoDB.Query.MongoContext>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Database.MongoDB.Query.MongoContext>_R
                               <GHC.Types.IO>_R
                               <()>_N))) -}
68792f443f1b9f2222140b4dde07d336
  doCitySummary1 ::
    Database.MongoDB.Query.MongoContext
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (r1 :: Database.MongoDB.Query.MongoContext)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Deneme.countByCity
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Database.MongoDB.Query.MongoContext>_R
                            <GHC.Types.IO>_R
                            <[Data.Bson.Document]>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <[Data.Bson.Document]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Deneme.doCitySummary2 ipv1 r1 ipv }) -}
b4b4982eb2760c1d50aab67c10a9f2e8
  doCitySummary2 ::
    [Data.Bson.Document]
    -> Database.MongoDB.Query.MongoContext
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U> -}
651ea3e7a7dfe75ab198ec89baa9f214
  doDelete :: [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.doDelete1
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6c6679d68897ca6c8a855a961849a306
  doDelete1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (ds :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   []
                   -> case Deneme.doDelete4
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : firstName1 theRest
                   -> case GHC.Base.eqString firstName1 Deneme.doDelete2 of wild1 {
                        GHC.Types.False
                        -> MongoUtils.runMongo1
                             @ ()
                             Deneme.dbName1
                             (\ (w3 :: Database.MongoDB.Query.MongoContext)[OneShot] ->
                              Database.MongoDB.Query.$wdeleteHelper
                                @ GHC.Types.IO
                                Control.Monad.IO.Class.$fMonadIOIO
                                (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.DeleteOption)
                                (GHC.Types.:
                                   @ Data.Bson.Field
                                   (case Deneme.contactToDocument9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                    Data.Bson.:=
                                      dt
                                      (Data.Bson.String
                                         (case theRest of wild2 {
                                            []
                                            -> case GHC.List.badHead
                                               ret_ty Data.Text.Internal.Text
                                               of {}
                                            : x ds1
                                            -> case GHC.Magic.runRW#
                                                      @ ('GHC.Types.TupleRep
                                                           '['GHC.Types.TupleRep '[],
                                                             'GHC.Types.LiftedRep])
                                                      @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Text.Internal.Text #)
                                                      (\ (s1 :: GHC.Prim.State#
                                                                  GHC.Prim.RealWorld)[OneShot] ->
                                                       case GHC.Prim.newByteArray#
                                                              @ GHC.Prim.RealWorld
                                                              10#
                                                              s1 of ds2 { (#,#) ipv4 ipv5 ->
                                                       Deneme.$wouter7
                                                         ipv5
                                                         4#
                                                         x
                                                         0#
                                                         ipv4 }) of ds2 { (#,#) ipv4 ipv5 ->
                                               ipv5 } })) })
                                   (GHC.Types.[] @ Data.Bson.Field))
                                Deneme.countByCity43
                                w3)
                               `cast`
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Database.MongoDB.Query.MongoContext>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             eta
                        GHC.Types.True
                        -> MongoUtils.runMongo1
                             @ ()
                             Deneme.dbName1
                             Deneme.deleteAllEntries_$sdeleteAllEntries
                               `cast`
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Database.MongoDB.Query.MongoContext>_R
                                       <GHC.Types.IO>_R
                                       <()>_N))
                             eta } }) -}
993282fb231b4a5a23bf43c8ae2ee1bc
  doDelete2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doDelete3) -}
6fc8b49ff51679fe0a4ff80886c51587
  doDelete3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("all"#) -}
e87cdb29799da96785eb39e1a6d06314
  doDelete4 :: GHC.Types.IO ()
  {- Strictness: x -}
95bf5a92a6d7d3069f75afb54306545e
  doFind :: [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.doFind1
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
89f9a7c9fab41e3ec2643db17681675c
  doFind1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (ds :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   []
                   -> case Deneme.doFind2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : firstName1 ds1
                   -> case ds1 of wild1 {
                        []
                        -> MongoUtils.runMongo1
                             @ ()
                             Deneme.dbName1
                             (Deneme.findByFirstName firstName1)
                             eta
                        : ipv ipv1
                        -> case Deneme.doFind2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } }) -}
1f82091cc1473b79dce8c3580543aea6
  doFind2 :: GHC.Types.IO ()
  {- Strictness: x -}
d64a1e24d7c71baaf51723ded043e5f7
  doInsert :: [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.doInsert1
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0a9ae592cdf12b50f2f699a78d24ebc3
  doInsert1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (args :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case args of wild {
                   []
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Deneme.doInsert5
                        GHC.Types.False
                        eta
                   : fN ds
                   -> case ds of wild1 {
                        [] -> Deneme.$wfail eta
                        : lN ds1
                        -> case ds1 of wild2 {
                             [] -> Deneme.$wfail eta
                             : ct ds2
                             -> case ds2 of wild3 {
                                  [] -> Deneme.$wfail eta
                                  : cty ds3
                                  -> case ds3 of wild4 {
                                       [] -> Deneme.$wfail eta
                                       : cell ds4
                                       -> case ds4 of wild5 {
                                            []
                                            -> MongoUtils.runMongo1
                                                 @ ()
                                                 Deneme.dbName1
                                                 (Deneme.$winsertContact fN lN ct cty cell)
                                                 eta
                                            : ipv ipv1 -> Deneme.$wfail eta } } } } } }) -}
ac3878e41a87e78a942346fbdaa771c1
  doInsert2 :: GHC.Base.String
  {- Unfolding: (Text.Printf.uprintfs
                   (GHC.CString.unpackCString# Deneme.doInsert4)
                   Deneme.doInsert3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bfad464fdf0ce7f58e1f36942c480874
  doInsert3 :: [Text.Printf.UPrintf]
  {- Unfolding: (GHC.List.reverse1
                   @ Text.Printf.UPrintf
                   (GHC.Types.[] @ Text.Printf.UPrintf)
                   (GHC.Types.[] @ Text.Printf.UPrintf)) -}
1573d51b1a3c26d85681c2ddfa2d90b3
  doInsert4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Bad arguments. Supply firstName lastName category city cellPhone\n"#) -}
6dcb8fd038ecb263cef5842e1e910f27
  doInsert5 :: GHC.Base.String
  {- Unfolding: (Text.Printf.uprintfs
                   (GHC.CString.unpackCString# Deneme.doInsert6)
                   Deneme.doInsert3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dd921d2b382b192c5ee59d79d982ec2
  doInsert6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("No arguments. Supply firstName lastName category city cellPhone\n"#) -}
57865eb2f333454e17b46fe83c4eece7
  doPopulate :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Deneme.doPopulate1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9195cb8ececc551a4796dde4e89b3205
  doPopulate1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (MongoUtils.runMongo1
                   @ ()
                   Deneme.dbName1
                   Deneme.doPopulate2
                     `cast`
                   (Trans
                        (<Database.MongoDB.Query.MongoContext>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Database.MongoDB.Query.MongoContext>_R
                                  <GHC.Types.IO>_R
                                  <()>_N)))) -}
b1b0467f6a21b4eb068b1f2c30f1f239
  doPopulate10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate11) -}
65f468735c088992f04a06fe6bd8688d
  doPopulate11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Montreal"#) -}
3b5533bc719e41de4a1261e709a92dbb
  doPopulate12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate13) -}
a57fa44405e0c389c7c50296ae1b57b6
  doPopulate13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("business"#) -}
6414f94100533006422156190cdf3589
  doPopulate14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate15) -}
1f4f499fcf590d3e60380d09a4382b1c
  doPopulate15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Person"#) -}
37585b1ebae2de7280496749aefacda8
  doPopulate16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate17) -}
46d56a005d6d09c3ef25d7c7508539a9
  doPopulate17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bob"#) -}
797c9417542c1c96dca3f4b109a05aff
  doPopulate18 :: Deneme.Contact
  {- Strictness: m,
     Unfolding: (Deneme.Contact
                   Deneme.doPopulate25
                   Deneme.doPopulate14
                   Deneme.doPopulate23
                   Deneme.doPopulate21
                   Deneme.doPopulate19) -}
089d60288d2fffc68ef81c5aa45b886a
  doPopulate19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate20) -}
11c3c72f8d71364d1ade7917749f4ed0
  doPopulate2 ::
    Database.MongoDB.Query.MongoContext
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (r1 :: Database.MongoDB.Query.MongoContext)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Deneme.doPopulate_m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Database.MongoDB.Query.MongoContext>_R
                            <GHC.Types.IO>_R
                            <[Data.Bson.Value]>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <[Data.Bson.Value]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Deneme.doPopulate3 ipv1 ipv }) -}
690ddca5f5687c7844a170b3101cc39f
  doPopulate20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("144-456-3333"#) -}
fc73c4336bece4a1e57cc952c05c2018
  doPopulate21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate22) -}
1845408b22638b053636cd6afef9919d
  doPopulate22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ottawa"#) -}
144c58363569e72138d96b07ee59f28e
  doPopulate23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate24) -}
6a49f33554619dbbc80ba5f5d1cb1378
  doPopulate24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("personal"#) -}
f3b984a2e79dd96f7a1883148642962f
  doPopulate25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate26) -}
f69a38731df4031fb1c04ceb681b28bd
  doPopulate26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test"#) -}
753f0c1c88cc938e55453beb04b05c09
  doPopulate27 :: Deneme.Contact
  {- Strictness: m,
     Unfolding: (Deneme.Contact
                   Deneme.doPopulate34
                   Deneme.doPopulate32
                   Deneme.doPopulate12
                   Deneme.doPopulate30
                   Deneme.doPopulate28) -}
c0a12763529743146516de828f80961b
  doPopulate28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate29) -}
f6329e0535d063bcec789ff90281f503
  doPopulate29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("123-456-7890"#) -}
4805baec7be2d16279260c3f4ff218e4
  doPopulate3 ::
    [Data.Bson.Value]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
4d992ea48c92f8a3885aac2259722ac1
  doPopulate30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate31) -}
6092b527e9dafe38d92f382e130e0918
  doPopulate31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Toronto"#) -}
160b55fb8d9e3433feb1e0bb7fb792ae
  doPopulate32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate33) -}
16122880892449c387aab8be5dcedfb8
  doPopulate33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Powell"#) -}
a55bcf901c9d1540b64d70d7d0e7507a
  doPopulate34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate35) -}
b05d14701c80fbb20c6f2eefc336febb
  doPopulate35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Steve"#) -}
1b9f9ea0697add1dae50ca46ccadf285
  doPopulate36 ::
    Database.MongoDB.Query.Collection
    -> [Data.Bson.Document]
    -> Database.MongoDB.Query.Action GHC.Types.IO [Data.Bson.Value]
  {- Unfolding: (Database.MongoDB.Query.insert'
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   (GHC.Types.[]
                      @ Database.MongoDB.Internal.Protocol.InsertOption)) -}
0d76ca1e25ef7be511c2bb85a5d2ed6b
  doPopulate4 :: [Deneme.Contact]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Deneme.Contact
                   Deneme.doPopulate27
                   Deneme.doPopulate5) -}
9c547d1dac57fb0bf0541fa4b024916a
  doPopulate5 :: [Deneme.Contact]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Deneme.Contact
                   Deneme.doPopulate18
                   Deneme.doPopulate6) -}
06c75d872a1d918756f491d4c6109b45
  doPopulate6 :: [Deneme.Contact]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Deneme.Contact
                   Deneme.doPopulate7
                   (GHC.Types.[] @ Deneme.Contact)) -}
45d5fcaf89dba061ab8da48c9a2b6210
  doPopulate7 :: Deneme.Contact
  {- Strictness: m,
     Unfolding: (Deneme.Contact
                   Deneme.doPopulate16
                   Deneme.doPopulate14
                   Deneme.doPopulate12
                   Deneme.doPopulate10
                   Deneme.doPopulate8) -}
4144ed2dff4e80a2823633fa0eb6f6ed
  doPopulate8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.doPopulate9) -}
37926e1352d6fd28d7fbaa96b0019ef0
  doPopulate9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("144-222-3333"#) -}
2b5f7fc8eedd40ace21a94d0a5879b1a
  doPopulate_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.MongoDB.Query.MongoContext GHC.Types.IO [Data.Bson.Value]
  {- Unfolding: (Deneme.doPopulate36
                   Deneme.countByCity43
                   (GHC.Base.map
                      @ Deneme.Contact
                      @ [Data.Bson.Field]
                      Deneme.contactToDocument
                      Deneme.doPopulate4)) -}
bc654ff73238077acb9032de4e2dc29b
  findByFirstName ::
    GHC.Base.String -> Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (firstName1 :: GHC.Base.String) ->
                 let {
                   m1 :: Data.Bson.Field
                   = case Deneme.contactToDocument9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                     Data.Bson.:=
                       dt
                       (Data.Bson.String
                          (case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Text.Internal.Text #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case GHC.Prim.newByteArray#
                                          @ GHC.Prim.RealWorld
                                          10#
                                          s1 of ds1 { (#,#) ipv4 ipv5 ->
                                   Deneme.$wouter8
                                     ipv5
                                     4#
                                     firstName1
                                     0#
                                     ipv4 }) of ds1 { (#,#) ipv4 ipv5 ->
                           ipv5 })) }
                 } in
                 let {
                   m2 :: [Data.Bson.Field]
                   = GHC.Types.: @ Data.Bson.Field m1 (GHC.Types.[] @ Data.Bson.Field)
                 } in
                 let {
                   m3 :: Database.MongoDB.Query.Selection
                   = Database.MongoDB.Query.Select m2 Deneme.countByCity43
                 } in
                 let {
                   m4 :: Database.MongoDB.Query.Query
                   = Database.MongoDB.Query.Query
                       (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.QueryOption)
                       m3
                       (GHC.Types.[] @ Data.Bson.Field)
                       Database.MongoDB.Query.$fSelectQuery1
                       Database.MongoDB.Query.$fSelectQuery1
                       (GHC.Types.[] @ Data.Bson.Field)
                       GHC.Types.False
                       Database.MongoDB.Query.$fSelectQuery1
                       (GHC.Types.[] @ Data.Bson.Field)
                 } in
                 (\ (r1 :: Database.MongoDB.Query.MongoContext)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (Database.MongoDB.Query.find1
                          @ GHC.Types.IO
                          Control.Monad.IO.Class.$fMonadIOIO
                          m4
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0] <Database.MongoDB.Query.Cursor>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case ((Database.MongoDB.Internal.Util.loop
                           @ (Control.Monad.Trans.Reader.ReaderT
                                Database.MongoDB.Query.MongoContext GHC.Types.IO)
                           @ Data.Bson.Document
                           (Deneme.$s$fMonadReaderT @ Database.MongoDB.Query.MongoContext)
                           (\ (w2 :: Database.MongoDB.Query.MongoContext) ->
                            case ipv1 of ww { Database.MongoDB.Query.Cursor ww1 ww2 ww3 ->
                            Database.MongoDB.Query.$wnext
                              @ GHC.Types.IO
                              Control.Monad.IO.Class.$fMonadIOIO
                              ww1
                              ww2
                              ww3
                              w2 })
                             `cast`
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Database.MongoDB.Query.MongoContext>_R
                                     <GHC.Types.IO>_R
                                     <GHC.Base.Maybe Data.Bson.Document>_N)))
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Database.MongoDB.Query.MongoContext>_R
                             <GHC.Types.IO>_R
                             <[Data.Bson.Document]>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0] <[Data.Bson.Document]>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  Deneme.displayEntry1 ipv3 ipv2 } })
                   `cast`
                 (Trans
                      (<Database.MongoDB.Query.MongoContext>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Database.MongoDB.Query.MongoContext>_R
                                <GHC.Types.IO>_R
                                <()>_N)))) -}
ecd000e59a375ad5afb59a72fd737ce6
  firstName :: Deneme.Contact -> GHC.Base.String
  RecSel Left Deneme.Contact
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Deneme.Contact) ->
                 case ds of wild { Deneme.Contact ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
69abd03839d4ec40f29d3b071ed7cb53
  hobarak :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.hobarak1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7ca8627ce3f57cebddeb38496212296f
  hobarak1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ (GHC.Base.Maybe [GHC.Base.String])
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs2
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe [GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.Base.Maybe [GHC.Base.String]>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      case System.Environment.dropRTSArgs ipv3 of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : ds4 xs -> Deneme.hobarak2 xs ipv2 } }
                   GHC.Base.Just argv
                   -> case argv of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : ds1 xs -> Deneme.hobarak2 xs ipv } } }) -}
df8ed6c57ef7c02ebcde884491191f23
  hobarak10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("populate"#) -}
7ddbf3e8f337a427d01c0bf0b2a7b6b6
  hobarak11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.hobarak12) -}
e127b2b27d2c547523580412b7816bc1
  hobarak12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("find"#) -}
a66598b9c62c7811547023c3e8b8ab96
  hobarak13 :: GHC.Types.IO ()
  {- Strictness: x -}
ed06eeba664e762a4789fbd71bce84b0
  hobarak2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (ds :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   []
                   -> case Deneme.hobarak13
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : firstArg restOfArgs
                   -> case GHC.Base.eqString firstArg Deneme.hobarak11 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString firstArg Deneme.hobarak9 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString firstArg Deneme.hobarak7 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString firstArg Deneme.hobarak5 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString firstArg Deneme.hobarak3 of wild5 {
                                            GHC.Types.False
                                            -> case Deneme.hobarak13
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> MongoUtils.runMongo1
                                                 @ ()
                                                 Deneme.dbName1
                                                 Deneme.doCitySummary1
                                                   `cast`
                                                 (Trans
                                                      (<Database.MongoDB.Query.MongoContext>_R
                                                       ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                <*>_N
                                                                <Database.MongoDB.Query.MongoContext>_R
                                                                <GHC.Types.IO>_R
                                                                <()>_N)))
                                                 eta }
                                       GHC.Types.True -> Deneme.doDelete1 restOfArgs eta }
                                  GHC.Types.True -> Deneme.doInsert1 restOfArgs eta }
                             GHC.Types.True
                             -> MongoUtils.runMongo1
                                  @ ()
                                  Deneme.dbName1
                                  Deneme.doPopulate2
                                    `cast`
                                  (Trans
                                       (<Database.MongoDB.Query.MongoContext>_R
                                        ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <Database.MongoDB.Query.MongoContext>_R
                                                 <GHC.Types.IO>_R
                                                 <()>_N)))
                                  eta }
                        GHC.Types.True -> Deneme.doFind1 restOfArgs eta } }) -}
721703140d55a68d16fca06a75e994c3
  hobarak3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.hobarak4) -}
96534d412ad39d18f1c446495fcd2cfa
  hobarak4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("citySummary"#) -}
d88948d234481ea38d875a9918425544
  hobarak5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.hobarak6) -}
6c18aecaff54eda248d6e434ac4bfcb8
  hobarak6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("delete"#) -}
a20d77b4d2c4fc8f32e52a2ab633f87b
  hobarak7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.hobarak8) -}
111086a853b784da5c930b56486c9c77
  hobarak8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("add"#) -}
3885f73047bf10ea6bb78a71b824831c
  hobarak9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Deneme.hobarak10) -}
cf1f417dbc96a7b7509b5cf641ce48f0
  insertContact ::
    Deneme.Contact -> Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Deneme.Contact) ->
                 case w of ww { Deneme.Contact ww1 ww2 ww3 ww4 ww5 ->
                 Deneme.$winsertContact ww1 ww2 ww3 ww4 ww5 }) -}
63b079aa2985bf0bca89a9352692af76
  insertContacts ::
    [Deneme.Contact] -> Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (contacts :: [Deneme.Contact]) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           Database.MongoDB.Query.MongoContext GHC.Types.IO [Data.Bson.Value]
                   = Deneme.doPopulate36
                       Deneme.countByCity43
                       (GHC.Base.map
                          @ Deneme.Contact
                          @ [Data.Bson.Field]
                          Deneme.contactToDocument
                          contacts)
                 } in
                 (\ (r1 :: Database.MongoDB.Query.MongoContext)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Database.MongoDB.Query.MongoContext>_R
                             <GHC.Types.IO>_R
                             <[Data.Bson.Value]>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0] <[Data.Bson.Value]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  Deneme.doPopulate3 ipv1 ipv })
                   `cast`
                 (Trans
                      (<Database.MongoDB.Query.MongoContext>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Database.MongoDB.Query.MongoContext>_R
                                <GHC.Types.IO>_R
                                <()>_N)))) -}
ecd000e59a375ad5afb59a72fd737ce6
  lastName :: Deneme.Contact -> GHC.Base.String
  RecSel Left Deneme.Contact
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Deneme.Contact) ->
                 case ds of wild { Deneme.Contact ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
a6ffe37e83f3cf6d8b04bda4530c02c3
  printCityCount ::
    Data.Bson.Document -> Database.MongoDB.Query.Action GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (document :: Data.Bson.Document) ->
                 case Deneme.printCityCount7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 let {
                   count :: Data.Functor.Identity.Identity GHC.Integer.Type.Integer
                   = Data.Bson.cast
                       @ GHC.Integer.Type.Integer
                       @ Data.Functor.Identity.Identity
                       Data.Bson.$fValInteger
                       Data.Functor.Identity.$fMonadIdentity
                       (case Deneme.printCityCount6 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                        (Data.Bson.$w$slook ww5 ww6 ww7 document)
                          `cast`
                        (Data.Functor.Identity.N:Identity[0] <Data.Bson.Value>_R) })
                 } in
                 case Data.Bson.$w!?
                        @ GHC.Base.String
                        MongoUtils.$s!?_$s$fVal[]
                        document
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Base.Nothing
                   -> let {
                        m1 :: GHC.Base.String
                        = Text.Printf.uprintfs
                            Deneme.printCityCount4
                            (GHC.List.reverse1
                               @ Text.Printf.UPrintf
                               (GHC.Types.:
                                  @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                                  (Text.Printf.$wparseIntFormat @ GHC.Integer.Type.Integer,
                                   Text.Printf.formatInteger
                                     count
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <GHC.Integer.Type.Integer>_R))
                                  (GHC.Types.[] @ Text.Printf.UPrintf))
                               (GHC.Types.[] @ Text.Printf.UPrintf))
                            (GHC.Types.[] @ GHC.Types.Char)
                      } in
                      (\ (ds :: Database.MongoDB.Query.MongoContext)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       GHC.IO.Handle.Text.hPutStr2
                         GHC.IO.Handle.FD.stdout
                         m1
                         GHC.Types.False
                         eta)
                        `cast`
                      (Trans
                           (<Database.MongoDB.Query.MongoContext>_R
                            ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Database.MongoDB.Query.MongoContext>_R
                                     <GHC.Types.IO>_R
                                     <()>_N)))
                   GHC.Base.Just cn
                   -> let {
                        m1 :: GHC.Base.String
                        = Text.Printf.uprintfs
                            Deneme.printCityCount2
                            (GHC.List.reverse1
                               @ Text.Printf.UPrintf
                               (GHC.Types.:
                                  @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                                  (Text.Printf.$wparseIntFormat @ GHC.Integer.Type.Integer,
                                   Text.Printf.formatInteger
                                     count
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <GHC.Integer.Type.Integer>_R))
                                  (GHC.Types.:
                                     @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                                     (Deneme.printCityCount1,
                                      \ (w2 :: Text.Printf.FieldFormat) ->
                                      case w2 of ww4 { Text.Printf.FieldFormat ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                      case ww11 of ww12 { GHC.Types.C# ww13 ->
                                      Text.Printf.$wformatString
                                        @ GHC.Types.Char
                                        Text.Printf.$fIsCharChar
                                        cn
                                        ww5
                                        ww6
                                        ww7
                                        ww13 } })
                                     (GHC.Types.[] @ Text.Printf.UPrintf)))
                               (GHC.Types.[] @ Text.Printf.UPrintf))
                            (GHC.Types.[] @ GHC.Types.Char)
                      } in
                      (\ (ds :: Database.MongoDB.Query.MongoContext)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       GHC.IO.Handle.Text.hPutStr2
                         GHC.IO.Handle.FD.stdout
                         m1
                         GHC.Types.False
                         eta)
                        `cast`
                      (Trans
                           (<Database.MongoDB.Query.MongoContext>_R
                            ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Database.MongoDB.Query.MongoContext>_R
                                     <GHC.Types.IO>_R
                                     <()>_N))) } }) -}
4fd412ce07f0dca72fa5aef2b248af49
  printCityCount1 :: [GHC.Types.Char] -> Text.Printf.FormatParse
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: [GHC.Types.Char]) ->
                 case ds1 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
f6de6ca2cfeed880c3b95ec1d55e2327
  printCityCount2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Deneme.printCityCount3) -}
ec2ee6231170f7c311476482380a079d
  printCityCount3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("City: %s, Count: %i\n"#) -}
b12139d7ee82893f44ebd2b0f4ddacef
  printCityCount4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Deneme.printCityCount5) -}
bfe43ce187a58bea35fc1fd5969c9e0b
  printCityCount5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("City: no-name, Count: %i\n"#) -}
87b9c9981c42acd6cf1a19a3e3863914
  printCityCount6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.countByCity22) -}
eb636e185d225f3adbb2bd0c9c1f3f39
  printCityCount7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Deneme.printCityCount8) -}
0a24b74e90be49b8981a7c37a5f6447e
  printCityCount8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_id.city"#) -}
654218b186fcbe3805373e9ba73e55e7
  processArgs :: [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deneme.hobarak2
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
instance GHC.Show.Show [Deneme.Contact] = Deneme.$fShowContact
"SPEC deleteAllEntries @ IO" forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                    GHC.Types.IO)
  Deneme.deleteAllEntries1 @ GHC.Types.IO $dMonadIO
  = Deneme.deleteAllEntries_$sdeleteAllEntries
"SPEC/Deneme $fApplicativeReaderT @ IO _" [orphan] forall @ r
                                                          (v :: GHC.Base.Applicative GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  v
  = Deneme.$s$fApplicativeReaderT @ r
"SPEC/Deneme $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Deneme.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Deneme $fFunctorReaderT @ IO _" [orphan] forall @ r
                                                      (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO @ r v
  = Deneme.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r
"SPEC/Deneme $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Deneme.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Deneme $fMonadReaderT @ IO _" [orphan] forall @ r
                                                    (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO @ r v
  = Deneme.$s$fMonadReaderT @ r
"SPEC/Deneme $fMonadReaderT_$c>> @ IO _" [orphan] forall @ r
                                                         ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ GHC.Types.IO
                                                 @ r
                                                 $dMonad
  = Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r
"SPEC/Deneme $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                          ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r
"SPEC/Deneme $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Deneme.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

